Okay, Robert. Here is a phased plan designed to be clear and actionable for Claude (via Cursor) to modify your existing index.html and associated files into a monolithic AP Stat Navigator application. This assumes Claude has access to the project files in the corrected directory structure you provided (js/, pdfs/unitX/, etc.).

Goal: Transform the current single-unit index.html into a dynamic, multi-unit application using js/allUnitsData.js as the central data source.

Target File: Primarily index.html (including its embedded <script> sections).
Supporting File: js/allUnitsData.js (ensure paths within are correct: pdfs/unitX/...).

Phased Plan for Claude (Cursor IDE)

Phase 1: Core Data Integration & State Setup

Modify index.html:

Remove Local Unit Data: Locate the const pdfFiles = [...] JavaScript constant definition (currently holding Unit 1 data) within the <script> tags and delete this entire multi-line constant definition. It will be replaced by dynamic loading from allUnitsData.js.

Verify Script Path: Ensure the <script> tag correctly points to the central data file:

<script src="js/allUnitsData.js"></script>


Initialize State Variable: Near the top of the main JavaScript logic (e.g., after Supabase initialization or where global variables are set), add a variable to track the currently active unit. Let's standardize on using the numeric part of the unit ID for simplicity (e.g., '1', '2', ... '9').

let currentSelectedUnitId = '1'; // Default to Unit 1 on load
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
JavaScript
IGNORE_WHEN_COPYING_END

Phase 2: Implement Unit Navigation

Modify index.html (HTML Structure):

Add Unit Tabs/Nav: Locate the existing tab structure (<div class="flex mb-0 border-b border-gray-200">...</div>). Add new tab elements for selecting Units 1 through 9. This could be similar to the existing tabs, or a separate row/dropdown. Example using simple divs (styling needed):

<!-- Insert this above or below the existing tabs -->
<div id="unit-navigation" class="flex flex-wrap mb-4 border-b border-gray-300 pb-2">
    <span class="mr-4 font-semibold">Select Unit:</span>
    <!-- Generate buttons/tabs 1-9 here -->
    <button class="unit-tab px-3 py-1 mr-2 mb-2 border rounded data-unit-id="1">Unit 1</button>
    <button class="unit-tab px-3 py-1 mr-2 mb-2 border rounded data-unit-id="2">Unit 2</button>
    <button class="unit-tab px-3 py-1 mr-2 mb-2 border rounded data-unit-id="3">Unit 3</button>
    <button class="unit-tab px-3 py-1 mr-2 mb-2 border rounded data-unit-id="4">Unit 4</button>
    <button class="unit-tab px-3 py-1 mr-2 mb-2 border rounded data-unit-id="5">Unit 5</button>
    <button class="unit-tab px-3 py-1 mr-2 mb-2 border rounded data-unit-id="6">Unit 6</button>
    <button class="unit-tab px-3 py-1 mr-2 mb-2 border rounded data-unit-id="7">Unit 7</button>
    <button class="unit-tab px-3 py-1 mr-2 mb-2 border rounded data-unit-id="8">Unit 8</button>
    <button class="unit-tab px-3 py-1 mr-2 mb-2 border rounded data-unit-id="9">Unit 9</button>
</div>
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Html
IGNORE_WHEN_COPYING_END

Self-note: Add styling later to make active tab clear.

Modify index.html (JavaScript Logic):

Add Event Listener: Add JavaScript code (perhaps within the DOMContentLoaded listener) to handle clicks on the new unit navigation elements (.unit-tab buttons in the example above).

document.querySelectorAll('.unit-tab').forEach(button => {
    button.addEventListener('click', function() {
        const selectedUnit = this.getAttribute('data-unit-id');
        if (selectedUnit !== currentSelectedUnitId) {
            currentSelectedUnitId = selectedUnit;
            console.log(`Unit selected: ${currentSelectedUnitId}`);

            // Update active tab visual indicator (add styling later)
            document.querySelectorAll('.unit-tab').forEach(btn => btn.classList.remove('active-unit-tab-style')); // Replace with actual style
            this.classList.add('active-unit-tab-style'); // Replace with actual style

            // Trigger UI refresh for the selected unit
            refreshUnitSpecificUI();
        }
    });
});

// Set initial active tab style for Unit 1
 document.querySelector('.unit-tab[data-unit-id="1"]').classList.add('active-unit-tab-style'); // Replace with actual style
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
JavaScript
IGNORE_WHEN_COPYING_END

Create Refresh Function: Define a new function refreshUnitSpecificUI() that will be responsible for updating all parts of the page that depend on the selected unit.

async function refreshUnitSpecificUI() {
    // 1. Update titles and headers
    updatePageTitles(currentSelectedUnitId);

    // 2. Reload data for the current tab's content (if it's unit-specific)
    const activeContentTab = document.querySelector('.tab-content.active');
    if (activeContentTab) {
         if (activeContentTab.id === 'content-study-materials') {
             // loadTopicProgress now needs context, or assumes global pdfFiles is updated
             // Let's modify load/populate functions directly first (Phase 3)
             await loadAndPopulateUnitData(); // New function combining load/populate
         } else if (activeContentTab.id === 'content-grok-prompt') {
             await loadAndPopulateUnitData(); // Reuse
         }
         // Add other tabs if they become unit-specific
    }

    // 3. Ensure bookmark buttons have correct context (handled within updateAllBookmarkButtons)
     await displayGlobalBookmarkIndicator(); // Re-running this ensures buttons update
}

// Helper function to update dynamic titles/headers
function updatePageTitles(unitId) {
     const unitData = ALL_UNITS_DATA.find(unit => unit.unitId === 'unit' + unitId);
     const unitNameFallback = `Unit ${unitId}`; // Fallback if data structure changes
     // Simplified unit name extraction, assumes `unitData.topics[0].name` structure might exist or use a dedicated unit name property later
     const unitFullName = unitData?.unitName || `Unit ${unitId}: Exploring...`; // Placeholder: Add unitName property to ALL_UNITS_DATA later

     document.title = `AP Statistics ${unitFullName}`;
     const headerElement = document.querySelector('header h1');
     if (headerElement) {
         headerElement.textContent = `AP Statistics ${unitFullName}`;
     }
     // Optionally update the exam weight text too, or make it generic
     const weightElement = document.querySelector('header .bg-yellow-100');
     if (weightElement) {
         // Placeholder - Fetch actual weight later if needed
         weightElement.innerHTML = `<span class="font-semibold">Exam Weight:</span> (Varies by Unit)`;
     }
}

// Define the combined load/populate function (will be filled in Phase 3)
async function loadAndPopulateUnitData() {
    console.log(`Loading and populating UI for Unit ${currentSelectedUnitId}`);
    // Fetch completions first to ensure accurate state
    await loadCompletionsFromSupabase(); // Assumes this function now updates a global structure
    // loadTopicProgress will now read from the structure updated by loadCompletionsFromSupabase
    loadTopicProgress(); // Modify this to work with the selected unit's data

    // Update UI elements
    populateTopicCards(); // Modify to use selected unit data
    updateCurrentTopicInfo(); // Modify to use selected unit data
    populateQuickAccessTopics(); // Modify to use selected unit data
    populateTopicSelect(); // Modify to use selected unit data
    updateProgressBar(); // Modify if progress bar becomes unit-specific
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
JavaScript
IGNORE_WHEN_COPYING_END

Phase 3: Dynamic Content Rendering

Modify index.html (JavaScript Functions):

Centralize Topic Data Access: Create a helper function to get the topic data for the currently selected unit from ALL_UNITS_DATA.

function getSelectedUnitTopics() {
    // Construct the expected unitId format (e.g., 'unit1', 'unit2')
    const fullUnitId = 'unit' + currentSelectedUnitId;
    const unitData = ALL_UNITS_DATA.find(unit => unit.unitId === fullUnitId);
    // Handle potential errors if data structure is wrong or unit not found
    if (!unitData || !Array.isArray(unitData.topics)) {
         console.error(`Topics not found or invalid for unitId: ${fullUnitId}`);
         return []; // Return empty array to prevent crashes
    }
    return unitData.topics; // Return the topics array for the selected unit
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
JavaScript
IGNORE_WHEN_COPYING_END

Self-note: Carefully check the unitId format in allUnitsData.js ('unit1' vs '1') and ensure consistency.

Update Rendering Functions: Modify the following functions to use getSelectedUnitTopics() instead of the old pdfFiles constant:

populateTopicCards(): Iterate over getSelectedUnitTopics(). Ensure generated PDF links use pdfs/unit${currentSelectedUnitId}/... paths. Ensure buttons/checkboxes have the correct data-topic-id and data-bookmark-unit (using currentSelectedUnitId).

updateCurrentTopicInfo(): Find the currentTopic within getSelectedUnitTopics(). Generate links/checkboxes correctly as above.

populateQuickAccessTopics(): Iterate over getSelectedUnitTopics(). Generate links/checkboxes correctly.

createTopicCard(): This function likely takes a topic object as input. Ensure the calling functions (populateTopicCards, updateNextTopic) pass the correct topic object obtained from getSelectedUnitTopics(). Inside createTopicCard, make sure the UNIT_ID used for data attributes (data-bookmark-unit) uses currentSelectedUnitId.

populateTopicSelect(): Iterate over getSelectedUnitTopics() to populate the dropdown.

updateProgressBar(): Decide if this should show unit progress or overall progress. If unit-specific, modify it to calculate based on getSelectedUnitTopics(). If overall, it might not need changes but relies on allUnitsData.js being complete. Let's assume it shows unit progress for now.

Update Progress Logic: Modify loadTopicProgress() and saveTopicProgress():

These functions currently use a single localStorage key based on the old hardcoded UNIT_ID. They must be modified to use a dynamic key based on currentSelectedUnitId (e.g., localStorage.setItem('apStatsUnit' + currentSelectedUnitId + 'Progress', ...)).

loadTopicProgress needs to read the data for the specific currentSelectedUnitId from storage and update the state of the topics retrieved by getSelectedUnitTopics().

saveTopicProgress needs to save the state of the topics retrieved by getSelectedUnitTopics() to the correct unit-specific key in storage.

Update Completion Handlers: Modify markVideoComplete, markQuizComplete, and markTopicAsCompleted:

Ensure they operate on the topics array obtained via getSelectedUnitTopics().

Ensure they call saveTopicProgress() correctly (which now saves to the unit-specific key).

Phase 4: Update Unit Context for Supabase & Bookmarks

Modify index.html (JavaScript Logic):

Remove Hardcoded UNIT_ID: Delete the line const UNIT_ID = '1';.

Use Dynamic Unit ID: Find all instances where the old UNIT_ID constant was used, especially in:

saveCompletionToSupabase(itemType, itemIdentifier, unitId): Ensure the unitId argument passed is currentSelectedUnitId.

deleteCompletionFromSupabase(itemType, itemIdentifier, unitId): Ensure the unitId argument passed is currentSelectedUnitId.

Bookmark functions (setBookmark, removeBookmark, fetchCurrentUserBookmark, updateAllBookmarkButtons, displayGlobalBookmarkIndicator): Ensure the unitId used in data attributes (data-bookmark-unit) and function calls reflects currentSelectedUnitId. Pay close attention to setBookmark and ensure it receives the correct currentSelectedUnitId. The updateAllBookmarkButtons logic needs to correctly compare currentGlobalBookmark.unit_id with the button's data-bookmark-unit (which should now reflect currentSelectedUnitId).

Standardize ID Format: Ensure the currentSelectedUnitId (e.g., '1', '2') matches the format expected/stored in the Supabase unit_id column and bookmark unit_id. If Supabase expects 'unit1', adjust accordingly. Using just the number ('1', '2') is likely simpler.

Phase 5: Refinement and Testing

Testing:

Navigate between all 9 units. Verify titles, headers, and content (topic cards, current topic info, quick access links) update correctly for each unit.

Test PDF links for multiple units to ensure paths are correct (pdfs/unitX/...).

Check/uncheck items (videos/quizzes) in different units. Refresh the page or switch units and return – verify the progress is saved and loaded correctly for each specific unit (check localStorage).

Verify Supabase saves: Check an item in Unit 2, check Supabase completions table for user_id = X, unit_id = '2'. Uncheck it, verify deletion. Repeat for another unit (e.g., Unit 5).

Test bookmarking: Set a bookmark in Unit 3. Navigate to Unit 7. Does the global indicator show the Unit 3 bookmark? Can you clear it? Can you set a new bookmark in Unit 7?

Verify the "Overall Progress" tab still calculates totals and dynamic quotas correctly using the full ALL_UNITS_DATA. Check the dot plot fetches all completions regardless of unit.

Code Cleanup: Remove any commented-out code related to the old pdfFiles constant. Ensure consistent variable naming. Add comments where logic is complex.

Styling: Apply CSS styles to the new unit navigation tabs/buttons to indicate the active unit clearly.
